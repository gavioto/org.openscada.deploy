<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     openSCADA Deploy Packages
     ====================================================================== -->
<project name="openSCADA Deploy" default="default">
    <description>
            openSCADA Deploy Packages
    </description>

	<property name="rpm.base" location="${basedir}/build"/>
	<property name="deb.base" location="${basedir}/build/debs"/>
	<property name="SOURCES" location="${rpm.base}/SOURCES" />
	
	<property name="build.root" location="."/>
	
	<property name="builder.profile" value="local"/>
	<import file="global/profile.d/profile.${builder.profile}.ant"/>
	
	<import file="${build.root}/global/lib.xml"/>
	
	<import file="lib.ant"/>
	
    <!-- ================================= 
          target: default              
         ================================= -->
    <target name="default" depends="dump,setup,rpm,alien,gather" description="openSCADA Deploy Packages">
    </target>
	
	<!-- ================================= 
          target: alien              
         ================================= -->
    <target name="alien" depends="" description="Convert to DEB">
    	<mkdir dir="${deb.base}"/>
        <shellscript shell="bash">
        	<env key="RPM_BASE" value="${rpm.base}"/>
        	<env key="DEB_BASE" value="${deb.base}"/>
<![CDATA[
for i in `find "$RPM_BASE" -name "*.rpm" -and -type f`; do
	pushd "$DEB_BASE"
	fakeroot alien "$i"
	popd
done
]]>
    	</shellscript>
    </target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: dump                      
         - - - - - - - - - - - - - - - - - -->
    <target name="dump">
		<echo message="rpm.base = ${rpm.base}"/>
    	<echo message="SOURCES = ${SOURCES}"/>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: clean                      
         - - - - - - - - - - - - - - - - - -->
    <target name="clean" depends="rpm.clean">
    	<delete dir="${deb.base}" failonerror="false"/>
		<delete dir="build" failonerror="false"/>
    	<delete dir="${output.dir}" failonerror="false"/>
    </target>
	
	<!-- ================================= 
          target: pack              
         ================================= -->
    <target name="pack" depends="" description="Pack local source">
        <tar destfile="${rpm.base}/SOURCES/org.openscada.p2-${deploy.version}.tar.gz" compression="gzip" basedir="${basedir}/source/openscada.p2">
        </tar>
    	<tar destfile="${rpm.base}/SOURCES/p2.profiles-${deploy.version}.tar.gz" compression="gzip" basedir="${basedir}/source/p2.profiles">
        </tar>
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: copySpec                      
         - - - - - - - - - - - - - - - - - -->
    <target name="copySpec">
    	<copy todir="${rpm.base}/SPECS">
    		<fileset dir="${basedir}/source/specs">
    			<include name="*.spec"/>
    		</fileset>
    	</copy>
    </target>

	
	<!-- ================================= 
          target: rpm              
         ================================= -->
    <target name="rpm" depends="rpm.clean,rpm.init,rpm.openscada.p2,rpm.wrap,rpm.p2director" description="Build the RPM">
    </target>
	
	<!-- ================================= 
          target: gather              
         ================================= -->
    <target name="gather">
    	<mkdir dir="${output.dir}/rpm"/>
		<copy todir="${output.dir}/rpm">
			<fileset dir="${build.root}/build/RPMS">
				<include name="**/*.rpm"/>
			</fileset>
			<mapper type="flatten"/>
    	</copy>
    	
    	<mkdir dir="${output.dir}/deb"/>
    	<copy todir="${output.dir}/deb">
			<fileset dir="${deb.base}">
				<include name="**/*.deb"/>
			</fileset>
			<mapper type="flatten"/>
    	</copy>
    </target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: rpm.init                      
         - - - - - - - - - - - - - - - - - -->
    <target name="rpm.init">
		<mkdir dir="${rpm.base}"/>
    	<mkdir dir="${rpm.base}/SOURCES"/>
    	<mkdir dir="${rpm.base}/RPMS"/>
    	<mkdir dir="${rpm.base}/BUILD"/>
    	<mkdir dir="${rpm.base}/SPECS"/>
    	<mkdir dir="${rpm.base}/BUILDROOT"/>
    </target>

	
	<!-- - - - - - - - - - - - - - - - - - 
          target: rpm.openscada.p2                      
         - - - - - - - - - - - - - - - - - -->
    <target name="rpm.openscada.p2" depends="pack,copySpec">
    	<rpm specfile="openscada.p2.spec" topdir="${rpm.base}" failOnError="true"/>
    	<rpm specfile="p2.profiles.spec" topdir="${rpm.base}" failOnError="true"/>
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: rpm.clean                      
         - - - - - - - - - - - - - - - - - -->
    <target name="rpm.clean">
    	<delete dir="${rpm.base}">
			<include name="**/*.rpm"/>
		</delete>    
    </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: rpm.wrap                      
         - - - - - - - - - - - - - - - - - -->
    <target name="rpm.wrap" depends="copySpec,rpm.init">
    	<mkdir dir="${SOURCES}"/>
		<copy file="${input.dir}/product/p2director-linux.gtk.x86.zip" tofile="${SOURCES}/p2director-linux.gtk.x86.zip"/>
		<copy file="${input.dir}/product/p2director-linux.gtk.x86_64.zip" tofile="${SOURCES}/p2director-linux.gtk.x86_64.zip"/>
    	
    	<wrapP2 name="org.eclipse.platform" version="3.7.2" file="org.eclipse.platform-3.7.2.zip"/>
    	<wrapP2 name="org.eclipse.rcp" version="3.7.2" file="org.eclipse.rcp-3.7.2.zip"/>
    	
    	<wrapP2 name="org.openscada.external.sdk" version="${external.version}"  file="org.openscada.external.sdk-${external.version}-p2repo.zip"/>
    	<wrapP2 name="org.openscada.aurora.sdk" version="${aurora.version}" file="org.openscada.aurora.sdk-${aurora.version}-p2repo.zip"/>
    	<wrapP2 name="org.openscada.oxygen.sdk" version="${oxygen.version}" file="org.openscada.oxygen.sdk-${oxygen.version}-p2repo.zip"/>
    	<wrapP2 name="org.openscada.utgard.sdk" version="${utgard.version}" file="org.openscada.utgard.sdk-${utgard.version}-p2repo.zip"/>
    	<wrapP2 name="org.openscada.atlantis.sdk" version="${atlantis.version}" file="org.openscada.atlantis.sdk-${atlantis.version}-p2repo.zip"/>
    	<wrapP2 name="org.openscada.deploy" version="${deploy.version}" file="org.openscada.deploy.repo-${deploy.version}-p2repo.zip"/>
    </target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: rpm.p2director                      
         - - - - - - - - - - - - - - - - - -->
    <target name="rpm.p2director" depends="copySpec">
    	<rpm specfile="p2director.spec" topdir="${rpm.base}" failOnError="true"/>
    </target>

</project>
